use crate::{
    constants::{N, NONCE_LEN, Q, SIG_COMP_MAXSIZE},
    falcon512::{
        comp_decode, distance, hash_to_point_ct, mq_intt, mq_ntt, mq_poly_montymul_ntt, mq_poly_sub,
    },
    shake256::{shake_extract, shake_flip, shake_inject},
};

// internal signature verification
// returns true if valid else false
pub fn verify_distance_raw(
    c0: &mut [u16; 512],
    s2: &[u16; 512],
    h: &[u16; 512],
    s1: &mut [u16; 512],
) -> u32 {
    // reduce s2_ elements modulo q ([0..q-1] range).
    unsafe {
        let s1_ptr = s1.as_mut_ptr();
        let s2_ptr = s2.as_ptr();

        for i in 0..N {
            *s1_ptr.add(i) = *s2_ptr.add(i) + (Q & (0 - (*s2_ptr.add(i) >> 0xf)));
        }
    }

    // computes -s1_ = s2_*h_ - c0_ mod ph_i mod q (in s1_[]).

    mq_ntt(s1);
    mq_poly_montymul_ntt(s1, h);
    mq_intt(s1);
    mq_poly_sub(s1, c0);

    // normalize -s1_ elements into th_e [-q/2..q/2] range.
    let q_shr_1 = Q >> 0x1;

    unsafe {
        let s1_ptr = s1.as_mut_ptr();

        for i in 0..N {
            *s1_ptr.add(i) = *s1_ptr.add(i) - (Q & (0 - (q_shr_1 - *s1_ptr.add(i) >> 0xf)));
        }
    }

    distance(s1, s2)
}

// verify that the given sig, msg and pub key matches
pub fn verify_distance(nonce_msg: &[u8], sig: &[u8], pk_ntt_fmt: &[u16; N]) -> u32 {
    let sig_len = sig.len();

    // sig must have a minimum length of 42 bytes
    // sig type must have the correct sig length in the pub key
    if sig_len < 1 || sig_len > SIG_COMP_MAXSIZE as usize || nonce_msg.len() == NONCE_LEN as usize {
        return 0;
    }

    // sigLen (supplied arg) typical value is in the order of 650 to 660,
    // yielding cb_sig_proper in the order of 609 to 619
    let (decoded_sig, sz2) = comp_decode(&sig);

    if sz2 != sig_len {
        return 0;
    }

    // decoded_sig now contains decoded signature

    let mut shake_ctx = [0u64; 26];

    shake_inject(&mut shake_ctx, &nonce_msg);
    shake_flip(&mut shake_ctx);

    let extracted = shake_extract(&mut shake_ctx);

    let mut tmp_buff = [0u16; N];
    let mut hash_nonce_msg = [0u16; N];

    hash_to_point_ct(&extracted, &mut hash_nonce_msg, &mut tmp_buff);

    verify_distance_raw(&mut hash_nonce_msg, &decoded_sig, pk_ntt_fmt, &mut tmp_buff)
}

pub fn get_valid_test_vector() -> (Vec<u8>, Vec<u8>, Vec<u8>) {
    let msg = vec![
        51, 179, 192, 117, 7, 228, 32, 23, 72, 73, 77, 131, 43, 110, 226, 166, 201, 59, 255, 155,
        14, 227, 67, 181, 80, 209, 248, 90, 61, 13, 224, 215, 4, 198, 209, 120, 66, 149, 19, 9,
        216, 28, 77, 141, 115, 79, 203, 251, 234, 222, 61, 63, 138, 3, 159, 170, 42, 44, 153, 87,
        232, 53, 173, 85, 178, 46, 117, 191, 87, 187, 85, 106, 200,
    ];
    let sig = vec![
        7, 101, 132, 61, 30, 70, 13, 23, 165, 39, 210, 188, 164, 5, 189, 85, 187, 199, 218, 9, 168,
        198, 32, 190, 10, 244, 167, 103, 217, 219, 150, 184, 15, 85, 228, 102, 103, 103, 81, 234,
        171, 167, 185, 59, 134, 215, 17, 50, 218, 160, 235, 55, 103, 130, 185, 238, 227, 117, 25,
        206, 16, 253, 211, 63, 233, 242, 147, 18, 195, 29, 135, 54, 32, 109, 22, 92, 244, 197, 40,
        170, 61, 220, 1, 120, 69, 225, 240, 221, 91, 10, 68, 255, 150, 28, 66, 216, 116, 169, 85,
        51, 229, 180, 56, 152, 47, 82, 76, 169, 84, 216, 117, 51, 191, 190, 66, 198, 63, 242, 171,
        199, 122, 52, 199, 157, 181, 90, 153, 23, 27, 188, 183, 44, 132, 42, 101, 48, 175, 47, 117,
        63, 12, 52, 172, 99, 47, 159, 30, 121, 73, 240, 191, 108, 103, 102, 91, 39, 114, 42, 136,
        87, 214, 38, 182, 255, 26, 19, 109, 146, 58, 57, 244, 6, 155, 116, 119, 255, 148, 110, 82,
        71, 166, 98, 119, 145, 212, 155, 89, 237, 201, 226, 82, 90, 134, 14, 110, 152, 40, 209,
        143, 100, 169, 241, 114, 34, 232, 22, 106, 2, 69, 56, 89, 187, 218, 11, 129, 134, 216, 201,
        146, 139, 181, 113, 228, 20, 100, 1, 215, 67, 14, 34, 89, 4, 103, 58, 210, 28, 202, 197,
        76, 20, 108, 36, 138, 29, 214, 154, 182, 73, 30, 144, 29, 109, 113, 177, 82, 21, 91, 233,
        125, 224, 87, 243, 145, 106, 63, 27, 66, 115, 48, 140, 41, 178, 244, 217, 105, 113, 103,
        185, 6, 129, 177, 88, 62, 217, 48, 167, 30, 153, 4, 103, 222, 163, 104, 19, 75, 236, 238,
        189, 89, 127, 155, 236, 146, 46, 129, 111, 27, 5, 112, 215, 40, 244, 174, 4, 100, 193, 247,
        151, 101, 127, 135, 164, 229, 45, 205, 202, 235, 146, 114, 102, 46, 166, 109, 124, 108,
        216, 120, 27, 49, 175, 85, 90, 217, 63, 95, 101, 231, 88, 22, 203, 141, 195, 6, 187, 103,
        229, 146, 181, 38, 27, 172, 167, 197, 9, 98, 158, 162, 175, 138, 187, 128, 203, 168, 158,
        229, 53, 183, 109, 253, 156, 203, 190, 59, 244, 143, 43, 200, 170, 52, 178, 110, 17, 3, 41,
        16, 83, 245, 203, 141, 227, 164, 90, 250, 90, 118, 223, 139, 33, 34, 237, 44, 130, 251,
        207, 34, 89, 41, 13, 65, 161, 79, 134, 177, 47, 53, 245, 212, 151, 98, 179, 76, 255, 19,
        238, 126, 66, 237, 236, 112, 32, 29, 127, 55, 195, 51, 22, 40, 143, 163, 7, 142, 54, 229,
        129, 8, 134, 92, 60, 254, 38, 61, 86, 54, 146, 4, 61, 236, 198, 47, 52, 38, 248, 96, 97,
        40, 91, 123, 27, 51, 111, 86, 255, 65, 187, 101, 233, 205, 109, 155, 146, 253, 144, 248,
        100, 170, 28, 146, 60, 184, 199, 85, 245, 205, 225, 119, 13, 134, 37, 149, 66, 113, 73,
        215, 114, 26, 170, 181, 209, 148, 174, 169, 172, 222, 202, 21, 190, 67, 203, 166, 166, 43,
        90, 51, 144, 158, 159, 196, 218, 28, 88, 20, 251, 215, 205, 106, 47, 165, 114, 227, 24,
        180, 44, 108, 49, 145, 64, 184, 110, 102, 57, 37, 128, 161, 26, 43, 67, 31, 68, 193, 249,
        39, 14, 79, 123, 36, 144, 243, 179, 37, 169, 151, 122, 113, 165, 117, 145, 86, 54, 99, 91,
        153, 105, 219, 214, 210, 32, 178, 76, 61, 153, 206, 187, 189, 131, 75, 136, 34, 43, 208,
        140, 58, 190, 18, 78, 128,
    ];
    let pk = vec![
        9, 107, 168, 108, 182, 88, 168, 244, 69, 201, 165, 228, 194, 131, 116, 190, 200, 121, 200,
        101, 95, 104, 82, 105, 35, 36, 9, 24, 7, 77, 1, 71, 192, 49, 98, 228, 164, 146, 0, 100,
        140, 101, 40, 3, 198, 253, 117, 9, 174, 154, 167, 153, 214, 49, 13, 11, 212, 39, 36, 224,
        99, 89, 32, 24, 98, 7, 0, 7, 103, 202, 90, 133, 70, 177, 117, 83, 8, 195, 4, 184, 79, 201,
        59, 6, 158, 38, 89, 133, 179, 152, 214, 184, 52, 105, 130, 135, 255, 130, 154, 168, 32,
        241, 122, 127, 66, 38, 171, 33, 246, 1, 235, 215, 23, 82, 38, 186, 178, 86, 216, 136, 143,
        0, 144, 50, 86, 109, 99, 131, 214, 132, 87, 234, 21, 90, 148, 48, 24, 112, 213, 137, 198,
        120, 237, 48, 66, 89, 233, 211, 123, 25, 59, 194, 167, 204, 188, 190, 197, 29, 105, 21,
        140, 68, 7, 58, 236, 151, 146, 99, 2, 83, 49, 139, 201, 84, 219, 245, 13, 21, 2, 130, 144,
        220, 45, 48, 156, 123, 123, 2, 166, 130, 55, 68, 212, 99, 218, 23, 116, 149, 149, 203, 119,
        230, 209, 109, 32, 209, 180, 195, 170, 216, 157, 50, 14, 190, 90, 103, 43, 185, 109, 108,
        213, 193, 239, 236, 139, 129, 18, 0, 203, 176, 98, 228, 115, 53, 37, 64, 237, 222, 248,
        175, 148, 153, 248, 205, 209, 220, 124, 104, 115, 240, 199, 166, 188, 183, 9, 117, 96, 39,
        31, 148, 104, 73, 183, 243, 115, 100, 11, 182, 156, 169, 181, 24, 170, 56, 10, 110, 176,
        167, 39, 94, 232, 78, 156, 34, 26, 237, 136, 245, 191, 186, 244, 58, 62, 222, 142, 106,
        164, 37, 88, 16, 79, 175, 128, 14, 1, 132, 65, 147, 3, 118, 198, 246, 231, 81, 86, 153,
        113, 244, 122, 219, 202, 92, 160, 12, 128, 25, 136, 243, 23, 161, 135, 34, 162, 146, 152,
        146, 94, 161, 84, 219, 201, 2, 78, 18, 5, 36, 162, 212, 29, 192, 241, 143, 216, 217, 9,
        246, 197, 9, 119, 64, 78, 32, 23, 103, 7, 139, 169, 161, 249, 228, 10, 139, 43, 169, 192,
        27, 125, 163, 160, 183, 58, 76, 42, 107, 79, 81, 139, 190, 227, 69, 93, 10, 242, 32, 77,
        220, 3, 28, 128, 92, 114, 204, 182, 71, 148, 11, 30, 103, 148, 216, 89, 170, 235, 206, 160,
        222, 181, 129, 214, 27, 146, 72, 189, 150, 151, 181, 203, 151, 74, 129, 118, 232, 249, 16,
        70, 156, 174, 10, 180, 237, 146, 210, 174, 233, 247, 235, 80, 41, 109, 175, 128, 87, 71,
        99, 5, 193, 24, 157, 29, 152, 64, 160, 148, 79, 4, 71, 251, 129, 229, 17, 66, 14, 103, 137,
        27, 152, 250, 108, 37, 112, 52, 213, 160, 99, 67, 125, 55, 145, 119, 206, 141, 63, 166,
        234, 241, 46, 45, 187, 126, 184, 228, 152, 72, 22, 18, 177, 146, 150, 23, 218, 95, 180, 94,
        76, 223, 137, 57, 39, 216, 186, 132, 42, 168, 97, 217, 197, 4, 113, 198, 208, 198, 223,
        126, 43, 178, 100, 101, 160, 235, 106, 58, 112, 157, 231, 146, 170, 250, 175, 146, 42, 169,
        93, 213, 146, 11, 114, 180, 184, 133, 108, 110, 99, 40, 96, 177, 15, 92, 192, 132, 80, 0,
        54, 113, 175, 56, 137, 97, 135, 43, 70, 100, 0, 173, 184, 21, 186, 129, 234, 121, 73, 69,
        209, 154, 16, 6, 34, 166, 202, 13, 65, 196, 234, 98, 12, 33, 220, 18, 81, 25, 227, 114, 65,
        143, 4, 64, 45, 159, 167, 24, 15, 123, 200, 154, 250, 84, 248, 8, 34, 68, 164, 47, 70, 229,
        181, 171, 206, 135, 181, 10, 125, 111, 235, 232, 215, 187, 186, 201, 38, 87, 203, 218, 29,
        183, 194, 85, 114, 164, 193, 208, 186, 234, 48, 68, 122, 134, 90, 43, 16, 54, 184, 128, 3,
        126, 47, 77, 38, 212, 83, 233, 233, 19, 37, 151, 121, 233, 22, 155, 40, 166, 46, 184, 9,
        165, 199, 68, 224, 78, 38, 14, 31, 43, 189, 168, 116, 241, 172, 103, 72, 57, 221, 180, 123,
        49, 72, 197, 148, 109, 224, 24, 1, 72, 183, 151, 61, 99, 197, 129, 147, 177, 124, 208, 93,
        22, 232, 12, 215, 146, 140, 42, 51, 131, 99, 162, 58, 129, 192, 96, 140, 135, 80, 85, 137,
        185, 218, 28, 97, 126, 123, 112, 120, 107, 103, 84, 251, 179, 10, 88, 22, 129, 11, 158, 18,
        108, 252, 197, 170, 73, 50, 110, 157, 132, 41, 115, 135, 75, 99, 89, 181, 219, 117, 97, 11,
        166, 138, 152, 199, 181, 232, 63, 18, 90, 130, 82, 46, 19, 184, 63, 184, 248, 100, 226,
        169, 123, 115, 181, 213, 68, 167, 65, 91, 101, 4, 161, 57, 57, 234, 177, 89, 93, 100, 250,
        244, 31, 171, 37, 168, 100, 165, 116, 222, 82, 68, 5, 232, 120, 51, 152, 119, 136, 109, 47,
        192, 127, 160, 49, 21, 8, 37, 36, 19, 237, 250, 17, 88, 70, 102, 103, 175, 247, 131, 134,
        218, 247, 203, 76, 155, 133, 9, 146, 249, 110, 32, 82, 83, 48, 89, 154, 182, 1, 212, 84,
        104, 142, 41, 76, 140, 62,
    ];

    (msg, pk, sig)
}

#[cfg(test)]
pub mod mutation_utils {
    use rand::prelude::*;

    /// Replace the sig with random bytes.
    pub fn randomize_sig(sig: &mut [u8]) {
        let mut rng = rand::rng();
        let len = sig.len();

        for b in &mut sig[..len] {
            *b = rng.random();
        }
    }

    /// Bit-flip n random bit in a random byte of sig.
    pub fn flip_sig_bit(sig: &mut [u8], n: usize) {
        let mut rng = rand::rng();

        for _ in 0..n {
            let idx = rng.random_range(0..sig.len());
            let bit = rng.random_range(0..8);

            sig[idx] ^= 1 << bit;
        }
    }

    /// Swap n pairs of random bytes in sig.
    pub fn swap_sig_bytes(sig: &mut [u8], n: usize) {
        let mut rng = rand::rng();

        for _ in 0..n {
            let i = rng.random_range(0..sig.len());
            let mut j = rng.random_range(0..sig.len());

            while i == j {
                j = rng.random_range(0..sig.len());
            }

            sig.swap(i, j);
        }
    }

    /// Set all sig bytes to 0x00.
    pub fn zero_sig(sig: &mut [u8]) {
        sig.fill(0);
    }

    /// Set all sig bytes to 0xFF.
    pub fn ff_sig(sig: &mut [u8]) {
        sig.fill(0xFF);
    }

    /// Truncate sig by n byte; returns new Vec.
    pub fn truncate_sig(sig: &[u8], n: usize) -> Vec<u8> {
        if sig.is_empty() { vec![] } else { sig[..sig.len()-n].to_vec() }
    }

    /// Extend sig by n byte with a random byte.
    pub fn extend_sig_random(sig: &[u8], n: usize) -> Vec<u8> {
        let mut new_sig = sig.to_vec();

        for _ in 0..n {
            new_sig.push(rand::random());
        }

        new_sig
    }

    /// Extend sig by n byte with zero.
    pub fn extend_sig_zero(sig: &[u8], n: usize) -> Vec<u8> {
        let mut new_sig = sig.to_vec();

        for _ in 0..n {
            new_sig.push(0);
        }

        new_sig
    }

    /// Replace the nonce (first 40 bytes) of msg with random bytes.
    pub fn randomize_nonce(msg: &mut [u8]) {
        let mut rng = rand::rng();
        let len = msg.len().min(40);

        for b in &mut msg[..len] {
            *b = rng.random();
        }
    }

    /// Set the nonce (first 40 bytes) of msg to zeros.
    pub fn zero_nonce(msg: &mut [u8]) {
        let len = msg.len().min(40);

        for b in &mut msg[..len] {
            *b = 0;
        }
    }

    /// Set the nonce (first 40 bytes) of msg to 0xFF.
    pub fn ff_nonce(msg: &mut [u8]) {
        let len = msg.len().min(40);

        for b in &mut msg[..len] {
            *b = 0xFF;
        }
    }

    /// Swap n random bytes pair in the nonce part (first 40 bytes) of msg.
    pub fn swap_nonce_bytes(msg: &mut [u8], n: usize) {
        let mut rng = rand::rng();
        let len = msg.len().min(40);

        for _ in 0..n {
            let i = rng.random_range(0..len);
            let mut j = rng.random_range(0..len);
            while i == j {
                j = rng.random_range(0..len);
            }
            msg.swap(i, j);
        }
    }
}
